// Generated by CoffeeScript 1.8.0
(function() {
  var Artlist, HeaderView, ListView, PostEventView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Artlist = window.Artlist = {};

  Artlist.index = new Backbone.Collection;

  Artlist.selection = new Backbone.Collection;

  $(document).ready(function(event) {
    console.info("THE ARTLIST");
    new HeaderView({
      el: $("body > header")
    });
    return new ListView({
      el: $("body > div.list"),
      collection: Artlist.selection
    });
  });

  HeaderView = (function(_super) {
    __extends(HeaderView, _super);

    function HeaderView() {
      return HeaderView.__super__.constructor.apply(this, arguments);
    }

    HeaderView.prototype.events = {
      "click label.post_an_event": "startPostEventActivity",
      "click label.search": "startSearchActivity",
      "click label.introduction": "showIntroduction"
    };

    HeaderView.prototype.startPostEventActivity = function(event) {
      console.info("startPostEventActivity");
      return new PostEventView({
        el: $("form.make_event")
      });
    };

    HeaderView.prototype.startSearchActivity = function(event) {
      console.info("startPostEventActivity");
      return new SearchInputView({
        el: $("form.search")
      });
    };

    return HeaderView;

  })(Backbone.View);

  ListView = (function(_super) {
    __extends(ListView, _super);

    function ListView() {
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.events = "";

    return ListView;

  })(Backbone.View);

  PostEventView = (function(_super) {
    __extends(PostEventView, _super);

    function PostEventView() {
      return PostEventView.__super__.constructor.apply(this, arguments);
    }

    PostEventView.prototype.initialize = $(PostEventView.el).find("input").focus();

    return PostEventView;

  })(Backbone.View);

}).call(this);
